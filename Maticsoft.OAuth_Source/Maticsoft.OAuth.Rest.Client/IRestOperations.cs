namespace Maticsoft.OAuth.Rest.Client
{
    using Maticsoft.OAuth.Http;
    using System;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    public interface IRestOperations
    {
        void Delete(Uri url);
        void Delete(string url, params object[] uriVariables);
        void Delete(string url, IDictionary<string, object> uriVariables);
        Task DeleteAsync(Uri url);
        Task DeleteAsync(string url, IDictionary<string, object> uriVariables);
        Task DeleteAsync(string url, params object[] uriVariables);
        RestOperationCanceler DeleteAsync(Uri url, Action<RestOperationCompletedEventArgs<object>> deleteCompleted);
        RestOperationCanceler DeleteAsync(string url, Action<RestOperationCompletedEventArgs<object>> deleteCompleted, params object[] uriVariables);
        RestOperationCanceler DeleteAsync(string url, IDictionary<string, object> uriVariables, Action<RestOperationCompletedEventArgs<object>> deleteCompleted);
        HttpResponseMessage Exchange(Uri url, HttpMethod method, HttpEntity requestEntity);
        HttpResponseMessage<T> Exchange<T>(Uri url, HttpMethod method, HttpEntity requestEntity) where T: class;
        HttpResponseMessage<T> Exchange<T>(string url, HttpMethod method, HttpEntity requestEntity, params object[] uriVariables) where T: class;
        HttpResponseMessage Exchange(string url, HttpMethod method, HttpEntity requestEntity, params object[] uriVariables);
        HttpResponseMessage<T> Exchange<T>(string url, HttpMethod method, HttpEntity requestEntity, IDictionary<string, object> uriVariables) where T: class;
        HttpResponseMessage Exchange(string url, HttpMethod method, HttpEntity requestEntity, IDictionary<string, object> uriVariables);
        RestOperationCanceler ExchangeAsync(Uri url, HttpMethod method, HttpEntity requestEntity, Action<RestOperationCompletedEventArgs<HttpResponseMessage>> methodCompleted);
        RestOperationCanceler ExchangeAsync<T>(Uri url, HttpMethod method, HttpEntity requestEntity, Action<RestOperationCompletedEventArgs<HttpResponseMessage<T>>> methodCompleted) where T: class;
        Task<HttpResponseMessage> ExchangeAsync(Uri url, HttpMethod method, HttpEntity requestEntity, CancellationToken cancellationToken);
        Task<HttpResponseMessage<T>> ExchangeAsync<T>(Uri url, HttpMethod method, HttpEntity requestEntity, CancellationToken cancellationToken) where T: class;
        RestOperationCanceler ExchangeAsync<T>(string url, HttpMethod method, HttpEntity requestEntity, Action<RestOperationCompletedEventArgs<HttpResponseMessage<T>>> methodCompleted, params object[] uriVariables) where T: class;
        RestOperationCanceler ExchangeAsync(string url, HttpMethod method, HttpEntity requestEntity, Action<RestOperationCompletedEventArgs<HttpResponseMessage>> methodCompleted, params object[] uriVariables);
        RestOperationCanceler ExchangeAsync<T>(string url, HttpMethod method, HttpEntity requestEntity, IDictionary<string, object> uriVariables, Action<RestOperationCompletedEventArgs<HttpResponseMessage<T>>> methodCompleted) where T: class;
        RestOperationCanceler ExchangeAsync(string url, HttpMethod method, HttpEntity requestEntity, IDictionary<string, object> uriVariables, Action<RestOperationCompletedEventArgs<HttpResponseMessage>> methodCompleted);
        Task<HttpResponseMessage> ExchangeAsync(string url, HttpMethod method, HttpEntity requestEntity, CancellationToken cancellationToken, params object[] uriVariables);
        Task<HttpResponseMessage> ExchangeAsync(string url, HttpMethod method, HttpEntity requestEntity, CancellationToken cancellationToken, IDictionary<string, object> uriVariables);
        Task<HttpResponseMessage<T>> ExchangeAsync<T>(string url, HttpMethod method, HttpEntity requestEntity, CancellationToken cancellationToken, IDictionary<string, object> uriVariables) where T: class;
        Task<HttpResponseMessage<T>> ExchangeAsync<T>(string url, HttpMethod method, HttpEntity requestEntity, CancellationToken cancellationToken, params object[] uriVariables) where T: class;
        T Execute<T>(Uri url, HttpMethod method, IRequestCallback requestCallback, IResponseExtractor<T> responseExtractor) where T: class;
        T Execute<T>(string url, HttpMethod method, IRequestCallback requestCallback, IResponseExtractor<T> responseExtractor, params object[] uriVariables) where T: class;
        T Execute<T>(string url, HttpMethod method, IRequestCallback requestCallback, IResponseExtractor<T> responseExtractor, IDictionary<string, object> uriVariables) where T: class;
        RestOperationCanceler ExecuteAsync<T>(Uri url, HttpMethod method, IRequestCallback requestCallback, IResponseExtractor<T> responseExtractor, Action<RestOperationCompletedEventArgs<T>> methodCompleted) where T: class;
        Task<T> ExecuteAsync<T>(Uri url, HttpMethod method, IRequestCallback requestCallback, IResponseExtractor<T> responseExtractor, CancellationToken cancellationToken) where T: class;
        RestOperationCanceler ExecuteAsync<T>(string url, HttpMethod method, IRequestCallback requestCallback, IResponseExtractor<T> responseExtractor, Action<RestOperationCompletedEventArgs<T>> methodCompleted, params object[] uriVariables) where T: class;
        RestOperationCanceler ExecuteAsync<T>(string url, HttpMethod method, IRequestCallback requestCallback, IResponseExtractor<T> responseExtractor, IDictionary<string, object> uriVariables, Action<RestOperationCompletedEventArgs<T>> methodCompleted) where T: class;
        Task<T> ExecuteAsync<T>(string url, HttpMethod method, IRequestCallback requestCallback, IResponseExtractor<T> responseExtractor, CancellationToken cancellationToken, IDictionary<string, object> uriVariables) where T: class;
        Task<T> ExecuteAsync<T>(string url, HttpMethod method, IRequestCallback requestCallback, IResponseExtractor<T> responseExtractor, CancellationToken cancellationToken, params object[] uriVariables) where T: class;
        HttpResponseMessage<T> GetForMessage<T>(Uri url) where T: class;
        HttpResponseMessage<T> GetForMessage<T>(string url, IDictionary<string, object> uriVariables) where T: class;
        HttpResponseMessage<T> GetForMessage<T>(string url, params object[] uriVariables) where T: class;
        Task<HttpResponseMessage<T>> GetForMessageAsync<T>(Uri url) where T: class;
        Task<HttpResponseMessage<T>> GetForMessageAsync<T>(string url, IDictionary<string, object> uriVariables) where T: class;
        Task<HttpResponseMessage<T>> GetForMessageAsync<T>(string url, params object[] uriVariables) where T: class;
        RestOperationCanceler GetForMessageAsync<T>(Uri url, Action<RestOperationCompletedEventArgs<HttpResponseMessage<T>>> getCompleted) where T: class;
        RestOperationCanceler GetForMessageAsync<T>(string url, Action<RestOperationCompletedEventArgs<HttpResponseMessage<T>>> getCompleted, params object[] uriVariables) where T: class;
        RestOperationCanceler GetForMessageAsync<T>(string url, IDictionary<string, object> uriVariables, Action<RestOperationCompletedEventArgs<HttpResponseMessage<T>>> getCompleted) where T: class;
        T GetForObject<T>(Uri url) where T: class;
        T GetForObject<T>(string url, IDictionary<string, object> uriVariables) where T: class;
        T GetForObject<T>(string url, params object[] uriVariables) where T: class;
        Task<T> GetForObjectAsync<T>(Uri url) where T: class;
        Task<T> GetForObjectAsync<T>(string url, params object[] uriVariables) where T: class;
        Task<T> GetForObjectAsync<T>(string url, IDictionary<string, object> uriVariables) where T: class;
        RestOperationCanceler GetForObjectAsync<T>(Uri url, Action<RestOperationCompletedEventArgs<T>> getCompleted) where T: class;
        RestOperationCanceler GetForObjectAsync<T>(string url, Action<RestOperationCompletedEventArgs<T>> getCompleted, params object[] uriVariables) where T: class;
        RestOperationCanceler GetForObjectAsync<T>(string url, IDictionary<string, object> uriVariables, Action<RestOperationCompletedEventArgs<T>> getCompleted) where T: class;
        HttpHeaders HeadForHeaders(Uri url);
        HttpHeaders HeadForHeaders(string url, IDictionary<string, object> uriVariables);
        HttpHeaders HeadForHeaders(string url, params object[] uriVariables);
        Task<HttpHeaders> HeadForHeadersAsync(Uri url);
        Task<HttpHeaders> HeadForHeadersAsync(string url, params object[] uriVariables);
        Task<HttpHeaders> HeadForHeadersAsync(string url, IDictionary<string, object> uriVariables);
        RestOperationCanceler HeadForHeadersAsync(Uri url, Action<RestOperationCompletedEventArgs<HttpHeaders>> headCompleted);
        RestOperationCanceler HeadForHeadersAsync(string url, Action<RestOperationCompletedEventArgs<HttpHeaders>> headCompleted, params object[] uriVariables);
        RestOperationCanceler HeadForHeadersAsync(string url, IDictionary<string, object> uriVariables, Action<RestOperationCompletedEventArgs<HttpHeaders>> headCompleted);
        IList<HttpMethod> OptionsForAllow(Uri url);
        IList<HttpMethod> OptionsForAllow(string url, params object[] uriVariables);
        IList<HttpMethod> OptionsForAllow(string url, IDictionary<string, object> uriVariables);
        Task<IList<HttpMethod>> OptionsForAllowAsync(Uri url);
        Task<IList<HttpMethod>> OptionsForAllowAsync(string url, params object[] uriVariables);
        Task<IList<HttpMethod>> OptionsForAllowAsync(string url, IDictionary<string, object> uriVariables);
        RestOperationCanceler OptionsForAllowAsync(Uri url, Action<RestOperationCompletedEventArgs<IList<HttpMethod>>> optionsCompleted);
        RestOperationCanceler OptionsForAllowAsync(string url, Action<RestOperationCompletedEventArgs<IList<HttpMethod>>> optionsCompleted, params object[] uriVariables);
        RestOperationCanceler OptionsForAllowAsync(string url, IDictionary<string, object> uriVariables, Action<RestOperationCompletedEventArgs<IList<HttpMethod>>> optionsCompleted);
        Uri PostForLocation(Uri url, object request);
        Uri PostForLocation(string url, object request, params object[] uriVariables);
        Uri PostForLocation(string url, object request, IDictionary<string, object> uriVariables);
        Task<Uri> PostForLocationAsync(Uri url, object request);
        Task<Uri> PostForLocationAsync(string url, object request, params object[] uriVariables);
        Task<Uri> PostForLocationAsync(string url, object request, IDictionary<string, object> uriVariables);
        RestOperationCanceler PostForLocationAsync(Uri url, object request, Action<RestOperationCompletedEventArgs<Uri>> postCompleted);
        RestOperationCanceler PostForLocationAsync(string url, object request, Action<RestOperationCompletedEventArgs<Uri>> postCompleted, params object[] uriVariables);
        RestOperationCanceler PostForLocationAsync(string url, object request, IDictionary<string, object> uriVariables, Action<RestOperationCompletedEventArgs<Uri>> postCompleted);
        HttpResponseMessage PostForMessage(Uri url, object request);
        HttpResponseMessage<T> PostForMessage<T>(Uri url, object request) where T: class;
        HttpResponseMessage PostForMessage(string url, object request, IDictionary<string, object> uriVariables);
        HttpResponseMessage PostForMessage(string url, object request, params object[] uriVariables);
        HttpResponseMessage<T> PostForMessage<T>(string url, object request, IDictionary<string, object> uriVariables) where T: class;
        HttpResponseMessage<T> PostForMessage<T>(string url, object request, params object[] uriVariables) where T: class;
        Task<HttpResponseMessage<T>> PostForMessageAsync<T>(Uri url, object request) where T: class;
        Task<HttpResponseMessage> PostForMessageAsync(Uri url, object request);
        Task<HttpResponseMessage> PostForMessageAsync(string url, object request, params object[] uriVariables);
        Task<HttpResponseMessage> PostForMessageAsync(string url, object request, IDictionary<string, object> uriVariables);
        Task<HttpResponseMessage<T>> PostForMessageAsync<T>(string url, object request, IDictionary<string, object> uriVariables) where T: class;
        Task<HttpResponseMessage<T>> PostForMessageAsync<T>(string url, object request, params object[] uriVariables) where T: class;
        RestOperationCanceler PostForMessageAsync(Uri url, object request, Action<RestOperationCompletedEventArgs<HttpResponseMessage>> postCompleted);
        RestOperationCanceler PostForMessageAsync<T>(Uri url, object request, Action<RestOperationCompletedEventArgs<HttpResponseMessage<T>>> postCompleted) where T: class;
        RestOperationCanceler PostForMessageAsync<T>(string url, object request, Action<RestOperationCompletedEventArgs<HttpResponseMessage<T>>> postCompleted, params object[] uriVariables) where T: class;
        RestOperationCanceler PostForMessageAsync(string url, object request, Action<RestOperationCompletedEventArgs<HttpResponseMessage>> postCompleted, params object[] uriVariables);
        RestOperationCanceler PostForMessageAsync(string url, object request, IDictionary<string, object> uriVariables, Action<RestOperationCompletedEventArgs<HttpResponseMessage>> postCompleted);
        RestOperationCanceler PostForMessageAsync<T>(string url, object request, IDictionary<string, object> uriVariables, Action<RestOperationCompletedEventArgs<HttpResponseMessage<T>>> postCompleted) where T: class;
        T PostForObject<T>(Uri url, object request) where T: class;
        T PostForObject<T>(string url, object request, params object[] uriVariables) where T: class;
        T PostForObject<T>(string url, object request, IDictionary<string, object> uriVariables) where T: class;
        Task<T> PostForObjectAsync<T>(Uri url, object request) where T: class;
        Task<T> PostForObjectAsync<T>(string url, object request, IDictionary<string, object> uriVariables) where T: class;
        Task<T> PostForObjectAsync<T>(string url, object request, params object[] uriVariables) where T: class;
        RestOperationCanceler PostForObjectAsync<T>(Uri url, object request, Action<RestOperationCompletedEventArgs<T>> postCompleted) where T: class;
        RestOperationCanceler PostForObjectAsync<T>(string url, object request, Action<RestOperationCompletedEventArgs<T>> postCompleted, params object[] uriVariables) where T: class;
        RestOperationCanceler PostForObjectAsync<T>(string url, object request, IDictionary<string, object> uriVariables, Action<RestOperationCompletedEventArgs<T>> postCompleted) where T: class;
        void Put(Uri url, object request);
        void Put(string url, object request, params object[] uriVariables);
        void Put(string url, object request, IDictionary<string, object> uriVariables);
        Task PutAsync(Uri url, object request);
        Task PutAsync(string url, object request, IDictionary<string, object> uriVariables);
        Task PutAsync(string url, object request, params object[] uriVariables);
        RestOperationCanceler PutAsync(Uri url, object request, Action<RestOperationCompletedEventArgs<object>> putCompleted);
        RestOperationCanceler PutAsync(string url, object request, Action<RestOperationCompletedEventArgs<object>> putCompleted, params object[] uriVariables);
        RestOperationCanceler PutAsync(string url, object request, IDictionary<string, object> uriVariables, Action<RestOperationCompletedEventArgs<object>> putCompleted);
    }
}

